package com.leetcode.challenge;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Stack;

import javafx.util.Pair;

public class Back2BackSWE {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//System.out.println(numDecodings("12"));
		//System.out.println(secondMax(new int[] {10,15,-21,30,37}));
		//System.out.println(secondMaxApp2(new int[] {10,15,-21,30,37}));
		//System.out.println(coinChange1(new int[] {2}, 3));
		//System.out.println(coinChangeAllWay(new int[] {1,2,5}, 5));
		//nextPermutation(new int[] {6,2,1,5,4,3,0});
		/*System.out.println(longestCommonSubsequenceTD("aggtab", "gxtxayb"));
		System.out.println(longestCommonSubsequenceBU("aggtab", "gxtxayb"));*/
		
/*		int matrix[][] = { { 6, -5, -7, 4, -4 }, { -9, 3, -6, 5, 2 }, { -10, 4, 7, -6, 3 }, { -8, 9, -3, 3, -7 } };

		Rectangle maxSumRectangle = maxSum(matrix);

		System.out.println("Rectangle Sum: " + maxSumRectangle.maxSum);

		System.out.println("Left Index: " + maxSumRectangle.leftBorder);
		System.out.println("Right Index: " + maxSumRectangle.rightBorder);
		System.out.println("Top Index: " + maxSumRectangle.topBorder);
		System.out.println("Bottom Index: " + maxSumRectangle.bottomBorder);
		*/
		/*int[][] matrix = {{3,0,1,4,2},
				{5,6,3,2,1},
				{1,2,0,1,5},
				{4,1,0,1,7},
				{1,0,3,0,5}};
		
		NumMatrix nm = new Back2BackSWE().new NumMatrix(matrix);
		System.out.println(nm.sumRegion(2, 1, 4, 3));*/
		
		//System.out.println(addNumbers(5, 10));
		//System.out.println(subNumbers(5, 10));
		//System.out.println(minWindow("ADOBECODEBANC","ABC"));
		
		
	}
	
	public static int minEditDistance(String a, String b) {
		return minEditDistance(a, b, a.length(), b.length());
	}
	
	public static int minEditDistance(String a, String b, int m, int n) {
		if(m < 0)
			return n;
		if (n < 0)
			return m;
		if(a.charAt(m-1) == b.charAt(n-1))
			return minEditDistance(a, b, m-1, n-1);
		
		return 1 + min(minEditDistance(a, b, m, n-1),
				minEditDistance(a, b, m-1, n-1),
				minEditDistance(a, b, m-1, n-1)
				);
	}
	
	public static List<String> generateParenthesis(int n) {
		List<String> result = new ArrayList<>();
		backtrack(result, "", 0, 0, n);
		return result;
	}
	
	public static void backtrack(List<String> ans, String cur, int open, int close, int max) {
		if (cur.length() == max * 2) {
			ans.add(cur);
			System.out.println("Result: "+cur);
			return;
		}
		if (open < max)
			backtrack(ans, cur + "(", open + 1, close, max);
		if (close < open)
			backtrack(ans, cur + ")", open, close + 1, max);
	}
	
	public static int eggDrop(int nEgg, int kFloor) {
		int[][] cache = new int[nEgg+1][kFloor+1];
		initializeCache(cache, nEgg, kFloor);
		return eggDrop(nEgg, kFloor, cache);
	}
	
	private static void initializeCache(int[][] cache, int nEgg, int kFloor) {
		for(int egg=2; egg<=nEgg; egg++) {
			for(int floor=2; floor<=kFloor; floor++) {
				cache[egg][floor] = Integer.MAX_VALUE;
			}
		}
	}
	
	public static int eggDrop(int nEgg, int kFloor, int[][] cache) {
		if(kFloor == 0 || kFloor == 1) {
			return kFloor;
		}
		if(nEgg == 1) {
			return kFloor;
		}
		if(cache[nEgg][kFloor] != Integer.MAX_VALUE) {
			return cache[nEgg][kFloor];
		}
		for(int floor=1; floor<=kFloor; floor++) {
			int res = 1 + Math.max(eggDrop(nEgg-1, floor-1, cache), eggDrop(nEgg, kFloor-floor, cache));
			cache[nEgg][kFloor] = Math.min(cache[nEgg][kFloor], res);
		}
		return cache[nEgg][kFloor];
	}
	
	public static int evalRPN(String[] tokens) {
		Stack<Integer> stack = new Stack<>();
		for(String str : tokens) {
			switch(str) {
				case "+":
					stack.push(stack.pop() + stack.pop());
					break;
				case "*":
					stack.push(stack.pop() * stack.pop());
					break;
				case "-":
					stack.push(-stack.pop() + stack.pop());
					break;
				case "/":
					stack.push((1/stack.pop())*stack.pop());
					break;
				default:
					stack.push(Integer.parseInt(str));
			}
		}
		return stack.pop();
	}
	
	public static int subNumbers(int a, int b) {
		while(b != 0) {
			int borrow = ~a & b;
			a = a ^ b;
			b = borrow << 1;
		}
		return a;
	}
	
	public static int addNumbers(int a, int b) {
		while(b != 0) {
			int carry = a & b;
			a = a ^ b;
			b = carry << 1;
		}
		return a;
	}
	
	public static String minWindow(String s, String t) {
		if(s.length()==0 || t.length()==0){
            return "";
        }
        int[] map = new int[128];
        for(char c : t.toCharArray()){
            map[c]++;
        }
        int left = 0 , right = 0, start=0, length = Integer.MAX_VALUE, counter = t.length();
        while(right < s.length()){
            if(map[s.charAt(right++)]-- > 0){
            	counter--;
            }
            while(counter == 0){
                if(right-left < length){
                    length = right-left;
                    start = left;
                }
                if(map[s.charAt(left++)]++ == 0){
                    counter++;
                }
            }
        }
        return length == Integer.MAX_VALUE ? "" : s.substring(start, start+length);
	}
	public static String minWindow3(String s, String t) {

        if (s.length() == 0 || t.length() == 0) {
            return "";
        }
        Map<Character, Integer> dict = new HashMap<>();
        for(char c : t.toCharArray()) {
        	dict.put(c, dict.getOrDefault(c, 0)+1);
        }
        int required = dict.size();
        List<Pair<Integer, Character>> filteredList = new ArrayList<>();
        for(int i=0;i<s.length();i++) {
        	char c = s.charAt(i);
        	if(dict.containsKey(c)) {
        		filteredList.add(new Pair<Integer, Character>(i, c));
        	}
        }
        int l=0, r=0, formed=0;
        Map<Character, Integer> windowMap = new HashMap<>();
        int[] result = {-1, 0, 0};
        while(r<filteredList.size()) {
        	char c = filteredList.get(r).getValue();
        	windowMap.put(c, windowMap.getOrDefault(c, 0) + 1);
        	if(windowMap.get(c).intValue() == dict.get(c).intValue()) {
        		formed++;
        	}
        	while(l<=r && formed==required) {
        		c = filteredList.get(l).getValue();
        		int end = filteredList.get(r).getKey();
        		int start = filteredList.get(l).getKey();
        		if(result[0] == -1 || end-start+1<result[0]) {
        			result[0] = end-start+1;
        			result[1] = start;
        			result[2] = end;
        		}
        		windowMap.put(c, windowMap.get(c)-1);
        		if(windowMap.get(c).intValue() < dict.get(c).intValue()) {
        			formed--;
        		}
        		r++;
        	}
        	l++;
        }
        return result[0] == -1 ? "" : s.substring(result[1], result[2]+1);
    }
	
	public static String minWindow2(String s, String t) {
		Map<Character, Integer> requiredCharacter = buildMap(t);
		int minLength = Integer.MAX_VALUE;
		String minString = "";
		int left = 0;
		int right = 0;
		Map<Character, Integer> windowCharacterMapping = new HashMap<Character, Integer>();
		int totalFrequency = requiredCharacter.size();
		int matchedFrequency = 0;
		while(right < s.length()) {
			char rightCh = s.charAt(right);
			windowCharacterMapping.put(rightCh, windowCharacterMapping.getOrDefault(rightCh, 0) + 1);
			boolean rightCharIsRequired = requiredCharacter.containsKey(rightCh);
			if(rightCharIsRequired) {
				boolean charRequirementMatched = requiredCharacter.get(rightCh).intValue() == windowCharacterMapping.get(rightCh);
				if(charRequirementMatched)
					matchedFrequency++;
			}
			
			while(totalFrequency == matchedFrequency && left <= right) {
				char leftCh = s.charAt(left);
				int windowSize = right - left + 1;
				if(windowSize < minLength) {
					minLength = windowSize;
					minString = s.substring(left, right+1);
				}
				windowCharacterMapping.put(leftCh, windowCharacterMapping.get(leftCh) - 1);
				boolean leftCharIsRequired = requiredCharacter.containsKey(leftCh);
				if(leftCharIsRequired) {
					boolean charFailsRequirement = windowCharacterMapping.get(leftCh).intValue() < requiredCharacter.get(leftCh).intValue();
					if(charFailsRequirement)
						matchedFrequency--;
				}
				left++;
			}
			
			
			right++;
		}
		
		return minString;
	}
	
	public static Map<Character, Integer> buildMap(String t){
		Map<Character, Integer> map = new HashMap<>();
		for(char c : t.toCharArray()) {
			map.put(c, map.getOrDefault(c, 0) + 1);
		}
		return map;
	}
	
	public static String minWindow1(String s, String t) {
		int n = s.length();
		int minLength = Integer.MAX_VALUE;
		String minString = "";
		
		for(int left=0; left<n; left++) {
			for(int right=left; right<n; right++) {
				String str = s.substring(left, right+1);
				boolean found = stringMatch(str, t);
				if(found && minLength > str.length()) {
					minString = str;
					minLength = str.length();
				}
			}
		}
		
		return minString;
	}
	
	public static boolean stringMatch(String str, String t) {
		Map<Character, Integer> map = new HashMap<>();
		for(char ch : t.toCharArray()) {
			map.put(ch, map.getOrDefault(ch, 0)+1);
		}
		
		for(char ch : str.toCharArray()) {
			if(map.containsKey(ch)) {
				int newOccurance = map.get(ch) - 1;
				if(newOccurance == 0)
					map.remove(ch);
				else
					map.put(ch, newOccurance);
			}
		}
		return map.isEmpty();
	}
	
	class NumMatrix {

		int[][] dp;

		public NumMatrix(int[][] matrix) {
			if (matrix.length == 0 || matrix[0].length == 0)
				return;
			dp = new int[matrix.length + 1][matrix[0].length + 1];
			for (int r = 0; r < matrix.length; r++) {
				for (int c = 0; c < matrix[0].length; c++) {
					dp[r + 1][c + 1] = dp[r + 1][c] + dp[r][c + 1] + matrix[r][c] - dp[r][c];
				}
			}
		}

	    public int sumRegion(int row1, int col1, int row2, int col2) {
	        return dp[row2+1][col2+1] - dp[row1][col2+1] - dp[row2+1][col1] + dp[row1][col1];
	    }
	}

	public static Rectangle maxSum(int[][] matrix) {
		Back2BackSWE b = new Back2BackSWE();
		
		int rows = matrix.length;
		int cols = matrix[0].length;
		
		int runningRowSums[] = new int[rows];
		Rectangle maxRectangle = b.new Rectangle();
		
		for(int left=0;left<cols;left++) {
			
			for(int i=0;i<rows;i++) {
				runningRowSums[i] = 0;
			}
			
			for(int right=left;right<cols;right++) {
		
				for(int i=0;i<rows;i++) {
					runningRowSums[i] += matrix[i][right];
				}
				
				KadaneResult kadaneResult = kadane(runningRowSums);
				
				if(kadaneResult.maxSum > maxRectangle.maxSum) {
					maxRectangle.maxSum = kadaneResult.maxSum;
					maxRectangle.leftBorder = left;
					maxRectangle.rightBorder = right;
					maxRectangle.topBorder = kadaneResult.startIndex;
					maxRectangle.bottomBorder = kadaneResult.endIndex;
				}
			}
		}
		return maxRectangle;
	}
	
	public static KadaneResult kadane(int[] arr) {
		Back2BackSWE b = new Back2BackSWE();
		int max = 0;
		int bestSoFar = 0;
		int startIndex = -1;
		int endIndex = -1;
		int currentIndex = 0;
		for(int i=0;i<arr.length;i++) {
			bestSoFar += arr[i];
			if(bestSoFar<0) {
				bestSoFar = 0;
				currentIndex = i+1;
			}
			if(max<bestSoFar) {
				max = bestSoFar;
				startIndex = currentIndex;
				endIndex = i;
			}
		}
		return b.new KadaneResult(max, startIndex, endIndex);
	}
	
	public class Rectangle{
		int maxSum;
		int leftBorder;
		int rightBorder;
		int topBorder;
		int bottomBorder;
	}
	
	public class KadaneResult{
		int maxSum;
		int startIndex;
		int endIndex;
		public KadaneResult(int maxSum, int startIndex, int endIndex) {
			this.maxSum = maxSum;
			this.startIndex = startIndex;
			this.endIndex = endIndex;
		}
	}
	
	class MyQueue{
		Stack<Integer> pushStack;
		Stack<Integer> popStack;
		public MyQueue() {
			pushStack = new Stack<>();
			popStack = new Stack<>();
		}
		public void push(int item) {
			pushStack.push(item);
		}
		
		public int pop() {
			ensureCapacityOfPopStack();
			if(!popStack.isEmpty())
				return popStack.pop();
			return -1;
		}
		
		public int peek() {
			ensureCapacityOfPopStack();
			if(!popStack.isEmpty())
				return popStack.peek();
			return -1;
		}
		
		public void ensureCapacityOfPopStack() {
			if(popStack.isEmpty())
				populatePopStack();
		}
		
		public void populatePopStack() {
			while(!pushStack.isEmpty()) {
				popStack.push(pushStack.pop());
			}
		}
	}
	
	public static int longestCommonSubsequenceBU(String s1, String s2) {
		int[][] dp = new int[s2.length()+1][s1.length()+1];
		for(int i=0;i<=s2.length();i++) {
			for(int j=0;j<=s1.length();j++) {
				if(i==0 || j==0)
					dp[i][j] = 0;
				else if(s2.charAt(i-1) == s1.charAt(j-1))
					dp[i][j] = dp[i-1][j-1] + 1;
				else
					dp[i][j] = Math.max(dp[i][j-1], dp[i-1][j]);
			}
		}
		return dp[s2.length()][s1.length()];
	}
	
	public static int longestCommonSubsequenceTD(String s1, String s2) {
		if(s1.length() == 0 || s2.length() == 0)
			return 0;
		String s1WithoutLastChar = s1.substring(0, s1.length()-1);
		String s2WithoutLastChar = s2.substring(0, s2.length()-1);
		if(s1.charAt(s1.length()-1) == s2.charAt(s2.length()-1))
			return 1 + longestCommonSubsequenceTD(s1WithoutLastChar, s2WithoutLastChar);
		
		return Math.max(longestCommonSubsequenceTD(s1WithoutLastChar, s2), longestCommonSubsequenceTD(s1, s2WithoutLastChar));
	}
	
	public static void nextPermutation(int[] nums) {
		int i = nums.length-2;
		while(i >= 0 && nums[i+1] <= nums[i]) {
			i--;
		}
		
		if(i >= 0) {
			int j = nums.length-1;
			while(j>=0 && nums[j] <= nums[i]) {
				j--;
			}
			swap(nums, i, j);
		}
		reverse(nums, i+1);
	}
	
	public static void reverse(int[] nums, int start) {
		int left = start;
		int right = nums.length-1;
		while(left < right) {
			swap(nums, left, right);
			left++;
			right--;
		}
	}
	
	public static void swap(int[] nums, int i, int j) {
		int temp = nums[i];
		nums[i] = nums[j];
		nums[j] = temp;
	}
	public static int coinChange1(int[] coins, int amount) {
        if(coins == null || coins.length == 0 || amount <= 0)
            return 0;
        int[] dp = new int[amount+1];
        Arrays.fill(dp,amount+1);
        dp[0] = 0;
        for(int i=1;i<=amount;i++){
            for(int j=0;j<coins.length;j++){
                if(coins[j]<=i){
                    dp[i] = Math.min(dp[i],dp[i - coins[j]] + 1);
                }
            }
        }
        return dp[amount] > amount ? -1 : dp[amount];
    }
	
	public static int coinChangeAllWay(int[] coins, int target) {
		int[][] dp = new int[coins.length+1][target+1];
        dp[0][0] = 1;
        for(int i=1;i<=coins.length;i++){
            dp[i][0] = 1;
            int currentCoin = coins[i-1];
            for(int j=1;j<=target;j++){
                int withoutCoin = dp[i-1][j];
                int withCoin = currentCoin > j ? 0 : dp[i][j-currentCoin];
                dp[i][j] = withoutCoin + withCoin;
            }
        }
        return dp[coins.length][target];
	}
	
	public static int coinChange(int[] coins, int target) {
		int[] dp = new int[target+1];
		Arrays.fill(dp, target+1);
		dp[0] = 0;
		for(int i=1; i<=target;i++) {
			for(int j=0;j<coins.length;j++) {
				if(coins[j]<=i)
					dp[i] = Math.min(dp[i], dp[i - coins[j]]+1);
			}
		}
		return dp[target] > target?-1: dp[target];
	}
	public static int[] plusOne(int[] digits) {
	        int last = digits.length-1;
	        digits[last] += 1;
	        
	        for(int i=last; i>0 && digits[i]==10; i--) {
	        	digits[i] = 0;
	        	digits[i-1] += 1;
	        }
	        
	        if(digits[0]==10) {
	        	int[] newArray = new int[digits.length+1];
	        	Arrays.fill(newArray, 0);
	        	newArray[0] = 1;
	        	return newArray;
	        }
	        
	        return digits;
	}
	
	private enum SearchType {
		  FIRST,
		  LAST
		}

	public static int[] searchRange(int[] arr, int target) {
		int[] result = {-1, -1};
		int first = search(arr, SearchType.FIRST, target);
		if(first == -1)
			return result;
		result[0] = first;
		result[1] = search(arr, SearchType.LAST, target);
		return result;
	}
	
	public static int search(int[] arr, SearchType searchType, int target) {
		int left=0;
		int right=arr.length-1;
		while(left<=right) {
			int mid = left + (right-left)/2;
			if(arr[mid]==target) {
				if(searchType == SearchType.FIRST) {
					// here we have to check whether mid-1 is a valid index
					if(checkForValidIndex(mid-1, arr) && arr[mid-1]==arr[mid]) {
						right = mid-1;
					}
					else {
						return mid;
					}
				}
				else {
					// here we have to check whether mid+1 is a valid index
					if(checkForValidIndex(mid+1,arr) && arr[mid+1]==arr[mid]) {
						left = mid+1;
					}
					else {
						return mid;
					}
				}
			}
			else if(arr[mid]<target) {
				left = mid+1;
			}
			else {
				right = mid-1;
			}
		}
		return -1;
	}
	public static boolean checkForValidIndex(int index, int[] arr) {
		return index>=0 && index<=arr.length;
	}
	public static int secondMaxApp2(int[] arr) {
		PriorityQueue<Integer> pq = new PriorityQueue<>((a,b)->a-b);
		for(int i=0;i<arr.length;i++) {
			pq.offer(arr[i]);
			if(pq.size()>2)
				pq.remove();
		}
		if(pq.size()==2) {
			return pq.remove();
		}
		return Integer.MIN_VALUE;
	}
	public static int secondMax(int[] arr) {
		if(arr.length<=1)
			return 0;
		int firstMax = Integer.MIN_VALUE;
		int secondMax = Integer.MIN_VALUE;
		for(int i=0;i<arr.length;i++) {
			if(arr[i]>firstMax) {
				secondMax = firstMax;
				firstMax = arr[i];
			}
			else if(arr[i]>secondMax && arr[i]!=firstMax) {
				secondMax = arr[i];
			}
		}
		return secondMax;
	}
	
	public static int numDecodings(String s) {
        int[] dp = new int[s.length()+1];
        Arrays.fill(dp, -1);
        return numDecodings(s, 0, dp);
    }
    
    public static boolean isValid(String s){
        if(s.length()==0)
            return false;
        // To handle "01" string
        if(s.charAt(0)=='0')
            return false;
        int val = Integer.parseInt(s);
        return val>=1 && val<=26;
    }
    public static int numDecodings(String s, int pointer, int[] dp) {
        if(pointer >= s.length())
            return 1;
        if(dp[pointer]!=-1)
            return dp[pointer];
        int allWays=0;
        if(pointer+1<=s.length()){
            String oneCharString = s.substring(pointer, pointer+1);
            if(isValid(oneCharString)){
                allWays += numDecodings(s, pointer+1, dp); 
            }
        }
        if(pointer+2<=s.length()){
            String twoCharString = s.substring(pointer, pointer+2);
            if(isValid(twoCharString)){
                allWays += numDecodings(s, pointer+2, dp); 
            }
        }
        dp[pointer] = allWays;
        return dp[pointer];
    }
}
